# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: 'ubuntu-latest'

stages:

  - stage: Build_Initialize
    displayName: 'Build_Initialize'
    jobs:
    - job: Install_software
      steps:
      - task: Bash@3
        displayName: 'Install PreReq packages'
        inputs:
          targetType: 'inline'
          script: |
              sudo apt-get update
              sudo apt-get install curl jq unzip -y
      - task: Bash@3
        displayName: 'Install_AWS_CLI'
        inputs:
          targetType: 'inline'
          script: |
              sudo apt-get install awscli -y
              export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
              export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
              export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
              aws --version
              aws s3 ls
      - task: Bash@3
        displayName: 'Install_AZURE_AZ'
        inputs:
          targetType: 'inline'
          script: |
              #az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
      - task: Bash@3
        displayName: 'Install_Packer'
        inputs:
          targetType: 'inline'
          script: |
            VER=1.5.1
            echo "Download File"
            wget https://releases.hashicorp.com/packer/${VER}/packer_${VER}_linux_amd64.zip
            echo "Unzip File and move to local bin"
            sudo unzip packer_${VER}_linux_amd64.zip -d /usr/local/bin
            echo "Get version"
            packer --version
      - task: Bash@3
        displayName: 'Install_Terraform'
        inputs:
          targetType: 'inline'
          script: |
            # Terraform installed on latest image
            # VER="0.12.19"
            # echo "Download File"
            # wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
            # echo "Unzip File and move to local bin"
            # sudo unzip terraform_${VER}_linux_amd64.zip -d /usr/local/bin
            # echo "Get version"
            # terraform -v
      - task: Bash@3
        displayName: 'Packer Create Image'
        inputs:
          targetType: 'inline'
          script: |
            packer --version
            export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
            export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
            export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
            packer build packer/aws_ubuntu18_base_marketplace.json

  - stage: firststage
    jobs:
      - job: firstjob
        steps:
          # To pass the variable FOO, write it to a file
          # While the file name doesn't matter, naming it like the variable and putting it inside the $(Pipeline.Workspace)/variables folder could be a good pattern
          - bash: |
              ls
              FOO="Testing"
              mkdir -p $(Pipeline.Workspace)/variables
              echo "$FOO" > $(Pipeline.Workspace)/variables/FOO

          # Publish the folder as pipeline artifact
          - publish: $(Pipeline.Workspace)/variables
            artifact: variables
  - stage: secondstage
    jobs:
      - job: secondjob
        steps:
          # Download the artifacts
          - download: current
            artifact: variables
          # Read the variable from the file, then expose it in the job
          - bash: |
              FOO=$(cat $(Pipeline.Workspace)/variables/FOO)
              echo "##vso[task.setvariable variable=FOO]$FOO"
          # Just like in the first example, we can expand the variable within Azure Pipelines itself
          - bash: |
              echo "$(FOO)"
          # Or we can expand it within bash, reading it as environmental variable
          - bash: |
              echo "$FOO"
          - bash: |
              echo "$(Pipeline.Workspace)/variables"