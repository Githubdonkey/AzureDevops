# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
  #branches:
    #include:
    #- '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: 'ubuntu-latest'

stages:

  - stage: Build_Initialize
    displayName: 'Build_Initialize'
    jobs:
    - job: Install_software
      steps:
      - task: Bash@3
        displayName: 'Install PreReq packages'
        inputs:
          targetType: 'inline'
          script: |
              sudo apt-get update
              sudo apt-get install curl jq unzip -y
      - task: Bash@3
        displayName: 'Install_AWS_CLI'
        inputs:
          targetType: 'inline'
          script: |
              sudo apt-get install awscli -y
              export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
              export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESSkey)
              export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
              aws --version
              aws s3 ls
      - task: Bash@3
        displayName: 'Install_AZURE_AZ'
        inputs:
          targetType: 'inline'
          script: |
              #az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
      - task: Bash@3
        displayName: 'Install_Packer'
        inputs:
          targetType: 'inline'
          script: |
            VER=1.5.1
            echo "Download File"
            wget https://releases.hashicorp.com/packer/${VER}/packer_${VER}_linux_amd64.zip
            echo "Unzip File and move to local bin"
            sudo unzip packer_${VER}_linux_amd64.zip -d /usr/local/bin
            echo "Get version"
            packer --version
      - task: Bash@3
        displayName: 'Install_Terraform'
        inputs:
          targetType: 'inline'
          script: |
            # Terraform installed on latest image
            # VER="0.12.19"
            # echo "Download File"
            # wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
            # echo "Unzip File and move to local bin"
            # sudo unzip terraform_${VER}_linux_amd64.zip -d /usr/local/bin
            # echo "Get version"
            # terraform -v
      - task: Bash@3
        displayName: 'Packer Create Image'
        inputs:
          targetType: 'inline'
          script: |
            export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
            export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESSkey)
            export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)

            az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)

            ./ado_packer_image.sh 11
      - task: Bash@3
        displayName: 'Create Variable Upload S3'
        inputs:
          targetType: 'inline'
          script: |
            export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
            export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESSkey)
            export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)

            ImageName=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d'/' -f9)
            ImagePath=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"')
            imagePacker=$(cat manifest.json | jq '.builds | to_entries[] | .value.custom_data.name' | tr -d '"')
            
            #ImageName=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
            #ImagePath=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
            #imagePacker=$(cat manifest.json | jq '.builds | to_entries[] | .value.custom_data.name' | tr -d '"')
            
            mkdir -p $(Pipeline.Workspace)/variables

            echo "$ImageName" > $(Pipeline.Workspace)/variables/ImageName
            echo "$ImagePath" > $(Pipeline.Workspace)/variables/ImagePath
            echo "$imagePacker" > $(Pipeline.Workspace)/variables/imagePacker

            aws s3 cp manifest.json s3://gitdonkey/devops/${imagePacker}.json

      - publish: $(Pipeline.Workspace)/variables
        artifact: variables

    - job: testing
      steps:
      - task: Bash@3
        displayName: 'test'
        inputs:
          targetType: 'inline'
          script: |
              ls

  - stage: secondstage
    jobs:
      - job: secondjob
        steps:
          # Download the artifacts
          - download: current
            artifact: variables
          # Read the variable from the file, then expose it in the job
          - bash: |
              ImageName=$(cat $(Pipeline.Workspace)/variables/ImageName)
              echo "##vso[task.setvariable variable=ImageName]$ImageName"
              ImagePath=$(cat $(Pipeline.Workspace)/variables/ImagePath)
              echo "##vso[task.setvariable variable=ImagePath]$ImagePath"
              imagePacker=$(cat $(Pipeline.Workspace)/variables/imagePacker)
              echo "##vso[task.setvariable variable=imagePacker]$imagePacker"
          # Just like in the first example, we can expand the variable within Azure Pipelines itself
          - bash: |
              echo "$(ImageName)"
              echo "$(ImagePath)"
              echo "$(imagePacker)"
          # Or we can expand it within bash, reading it as environmental variable
          - bash: |
              echo "$ImageName"
              echo "$ImagePath"
              echo "$imagePacker"            
  - stage: terraform_stage3
    jobs:
      - job: thrirdjob
        steps:
          # Download the artifacts
          - download: current
            artifact: variables
          # Read the variable from the file, then expose it in the job
          - bash: |
              ImageName=$(cat $(Pipeline.Workspace)/variables/ImageName)
              echo "##vso[task.setvariable variable=ImageName]$ImageName"
              ImagePath=$(cat $(Pipeline.Workspace)/variables/ImagePath)
              echo "##vso[task.setvariable variable=ImagePath]$ImagePath"
              imagePacker=$(cat $(Pipeline.Workspace)/variables/imagePacker)
              echo "##vso[task.setvariable variable=imagePacker]$imagePacker"
          # Just like in the first example, we can expand the variable within Azure Pipelines itself
          - bash: |
              echo "Starting Terraform build"
              echo "$(ImageName)"
              echo "$(ImagePath)"
              echo "$(imagePacker)"
              cp terraform/azure_main_modules.tf main.tf
              terraform init
              terraform plan -var="image_id=$(ImagePath)"
              terraform apply -var="image_id=$(ImagePath)" -auto-approve
              echo "sleep 4m"
              sleep 4m
              terraform destroy -var="image_id=$(ImagePath)" -auto-approve
          # Or we can expand it within bash, reading it as environmental variable
          - bash: |
              echo "$ImageName"
              echo "$ImagePath"
              echo "$imagePacker"