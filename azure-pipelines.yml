# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: Bash@3
  displayName: 'Install Packer'
  inputs:
    targetType: 'inline'
    script: |
        VER=1.4.5
        wget https://releases.hashicorp.com/packer/${VER}/packer_${VER}_linux_amd64.zip
        unzip packer_${VER}_linux_amd64.zip
        sudo mv packer /usr/local/bin
        packer --version

- task: Bash@3
  displayName: 'Install Terraform'
  inputs:
    targetType: 'inline'
    script: |
        VER=0.12.18
        wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
        unzip terraform_0.12.18_linux_amd64.zip
        sudo mv terraform /usr/local/bin
        terraform -v

- task: Bash@3
  displayName: 'Validate Packer'
  inputs:
    targetType: 'inline'
    script: |
        packer validate ubuntu16.json

- task: Bash@3
  displayName: 'Packer Create Image'
  inputs:
    targetType: 'inline'
    script: |
      export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
      export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
      export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
      export ARM_TENANT_ID=$(ARM_TENANT_ID)
      packer build ubuntu16.json

- task: Bash@3
  displayName: 'Terraform Create VM'
  inputs:
    targetType: 'inline'
    script: |
      export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
      export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
      export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
      export ARM_TENANT_ID=$(ARM_TENANT_ID)
      export TF_VAR_packer_image=$(cat manifest.json | jq '.builds | to_entries[] | .value.custom_data.managed_image_name' | tr -d '"')
      terraform init
      terraform apply -auto-approve
      sleep 3m
      terraform destroy -auto-approve