# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

parameters:
- name: imagesMenu
  displayName: Image Selection
  type: string
  default: ubuntu18-base
  values:
  - ubuntu18-base
  - win2012R2-base
  - win2016_base
  - ubuntu-16.04
  - macOS-latest
  - macOS-10.14
- name: osMenu
  displayName: Select OS
  type: string
  default: linux
  values:
  - linux
  - windows
- name: providerMenu
  displayName: Select Provider
  type: string
  default: aws
  values:
  - aws
  - azure
  - vcenter
  - all

- name: myObject
  type: string
  default: aws
  values:
  - aws
  - name: myObject1
  - name: myObject2
  - azure
  - vcenter
  - all

trigger: none
#trigger:
#  branches:
#    include:
#    - '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Testing
    displayName: Testing
    jobs:
    - job: show_variables
      steps:
      - task: Bash@3
        displayName: Show Variables
        inputs:
          targetType: 'inline'
          script: |
              echo "${{ parameters.imagesMenu }}"
              echo "${{ parameters.osMenu }}"
              echo "${{ parameters.providerMenu }}"

  - stage: Testing1
    displayName: Testing1
    jobs:
    - job: show_variables1
      steps:
      - task: Bash@3
        displayName: Show Variables
        inputs:
          targetType: 'inline'
          script: |
              echo "${{ parameters.imagesMenu }}"
              echo "${{ parameters.osMenu }}"
              echo "${{ parameters.providerMenu }}"

  - stage: Build_Initialize
    displayName: 'Build_Initialize'
    jobs:
    - job: Install_software
      steps:
      - task: Bash@3
        displayName: 'Install PreReq packages'
        inputs:
          targetType: 'inline'
          script: |
              # sudo apt-get update
              # sudo apt-get install curl jq unzip -y
      - task: Bash@3
        displayName: 'Install_AWS_CLI'
        inputs:
          targetType: 'inline'
          script: |
              # sudo apt-get install awscli -y
              # export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
              # export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESSkey)
              # export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
              # aws --version
              # aws s3 ls
      - task: Bash@3
        displayName: 'Install_AZURE_AZ'
        inputs:
          targetType: 'inline'
          script: |
            # az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
      - task: Bash@3
        displayName: 'Install_Packer'
        inputs:
          targetType: 'inline'
          script: |
            # VER=1.5.1
            # echo "Download File"
            # wget https://releases.hashicorp.com/packer/${VER}/packer_${VER}_linux_amd64.zip
            # echo "Unzip File and move to local bin"
            # sudo unzip packer_${VER}_linux_amd64.zip -d /usr/local/bin
            # echo "Get version"
            packer --version
      - task: Bash@3
        displayName: 'Install_Terraform'
        inputs:
          targetType: 'inline'
          script: |
            # Terraform installed on latest image
            # VER="0.12.19"
            # echo "Download File"
            # wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
            # echo "Unzip File and move to local bin"
            # sudo unzip terraform_${VER}_linux_amd64.zip -d /usr/local/bin
            # echo "Get version"
            terraform -v
  
  - stage: Run_Packer
    displayName: 'Run_Packer'
    jobs:
    - job: Run_Packer
      steps:
      - task: Bash@3
        displayName: 'Install_Packer'
        inputs:
          targetType: 'inline'
          script: |
            # VER=1.5.1
            # echo "Download File"
            # wget https://releases.hashicorp.com/packer/${VER}/packer_${VER}_linux_amd64.zip
            # echo "Unzip File and move to local bin"
            # sudo unzip packer_${VER}_linux_amd64.zip -d /usr/local/bin
            # echo "Get version"
            packer --version
      - task: Bash@3
        displayName: 'Packer_Create_Image'
        inputs:
          targetType: 'inline'
          script: |
            export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
            export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESSkey)
            export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)
            export PACKER_LOG_PATH="packer.log"
            export PACKER_LOG=1

            az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
            chmod +x ado_packer_image.sh
            ./ado_packer_image.sh "${{ parameters.providerMenu }}" "${{ parameters.osMenu }}" "${{ parameters.imagesMenu }}"

  - stage: terraform_stage3
    jobs:
      - job: terraform_stage3
        steps:

        # Just like in the first example, we can expand the variable within Azure Pipelines itself
        - task: Bash@3
          displayName: 'Terraform launch destroy'
          inputs:
            targetType: 'inline'
            script: |
              export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
              export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESSkey)
              export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
              export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              export ARM_TENANT_ID=$(ARM_TENANT_ID)
              echo "Starting Terraform build"
              echo "Provider: ${{ parameters.providerMenu }}"
              echo "OS: ${{ parameters.osMenu }}"
              echo "Image: ${{ parameters.imagesMenu }}"

              az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
              
              chmod +x ado_terraform.sh
              ./ado_terraform.sh "${{ parameters.providerMenu }}" "${{ parameters.osMenu }}" "${{ parameters.imagesMenu }}"