# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build_Initialize
  displayName: 'Build_Initialize'
  jobs:
  - job: Install_software
    steps:
    - task: Bash@3
      displayName: 'Install PreReq packages'
      inputs:
        targetType: 'inline'
        script: |
            sudo apt-get update
            sudo apt-get install curl jq unzip -y
    - task: Bash@3
      displayName: 'Install_AWS_CLI'
      inputs:
        targetType: 'inline'
        script: |
            sudo apt-get install awscli -y
            export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
            export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
            export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
            aws --version
            aws s3 ls
    - task: Bash@3
      displayName: 'Install_AZURE_AZ'
      inputs:
        targetType: 'inline'
        script: |
            az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
    - task: Bash@3
      displayName: 'Install_Packer'
      inputs:
        targetType: 'inline'
        script: |
          # VER=1.5.1
          # wget https://releases.hashicorp.com/packer/${VER}/packer_${VER}_linux_amd64.zip
          # unzip packer_${VER}_linux_amd64.zip
          ls
          # sudo mv packer /usr/local/bin
          # packer --version
    - task: Bash@3
      displayName: 'Install_Terraform'
      inputs:
        targetType: 'inline'
        script: |
          # VER=0.12.18
          # wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
          # terraform -v

- stage: Build_SecureImage
  displayName: 'Build'
  jobs:
  - job: Foo
    steps:
      - script: |
          echo "This is job Foo."
          echo "##vso[task.setvariable variable=doThing;isOutput=true]aws"
        name: DetermineResult
  - job: aws
    dependsOn: Foo
    condition: eq(dependencies.Foo.outputs['DetermineResult.doThing'], 'aws')
    steps:
      - script: |
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
          export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
          aws s3 cp s3://gitdonkey/devops/SICFactory-Ubuntu1804-1579569816.json manifest.json
          export ImageBuilder=$(cat manifest.json | jq '.builds | to_entries[] | .value.name' | tr -d '"')
          export ImageName=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
          export ImagePath=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
          
          echo "##vso[task.setvariable variable=imageBuilderPipeline;isOutput=true]$ImageBuilder"
          echo "##vso[task.setvariable variable=imageNamePipeline;isOutput=true]$ImageName"
          echo "##vso[task.setvariable variable=imagePathPipeline;isOutput=true]$ImagePath"
          echo "ImageBuilder: $ImageBuilder ImageName: $ImageName ImagePath: $ImagePath"
          echo "ImageBuilder: $imageBuilderPipeline ImageName: $imageNamePipeline ImagePath: $imagePathPipeline"
        name: DetermineImageInfo
  - job: AWS_Set_Image_Info
    dependsOn: aws
    condition: eq(dependencies.aws.outputs['DetermineImageInfo.imageBuilderPipeline'], 'amazon-ebs' )
    variables:
      # Define the variable FOO from the previous job
      # Note the use of single quotes!
      FOOO: $[ dependencies.aws.outputs['DetermineImageInfo.imageBuilderPipeline'] ]
    steps:
      - script: | 
          echo $(FOOO)
          echo $FOOO
        
  - job: Azure_Set_Image_Info
    dependsOn: aws
    condition: eq(dependencies.aws.outputs['DetermineImageInfo.imageBuilderPipeline'], 'azure-arm')
    steps:
      - script: echo "Job azure ran and doThing is azure."

- stage: Build_SecureImage2
  displayName: 'Build2'
  jobs:
  - job: test
    variables:
      # Define the variable FOO from the previous job
      # Note the use of single quotes!
      FOOO: $[ dependencies.aws.outputs['DetermineImageInfo.imageBuilderPipeline'] ]
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: | 
          echo "MySecret: $FOOO"
          echo $FOOO
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: echo $MYSECRET2
      env:
        MySecret: $(Foo)
# echo '##vso[task.setVariable variable=myVar]myValue'