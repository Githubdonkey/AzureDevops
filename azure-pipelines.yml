# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: 'ubuntu-latest'

stages:
- stage: Build_SecureImage
  displayName: 'Build'
  jobs:
  - job: Foo
    steps:
      - script: |
          echo "This is job Foo."
          echo "##vso[task.setvariable variable=doThing;isOutput=true]aws"
        name: DetermineResult
  - job: aws
    dependsOn: Foo
    condition: eq(dependencies.Foo.outputs['DetermineResult.doThing'], 'aws')
    steps:
      - script: |
          echo "Job aws ran and doThing is aws."
          sudo apt-get update
          sudo apt-get install awscli -y
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
          export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
          aws --version
          aws s3 ls
          aws s3 cp s3://gitdonkey/devops/SICFactory-Ubuntu1804-1579569816.json manifest.json
          ls
          export ImageBuilder=$(cat manifest.json | jq '.builds | to_entries[] | .value.name')
          export ImageName=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
          export ImagePath=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
          echo "ImageName: $ImageName"
          echo "ImagePath: $ImagePath"
          echo "##vso[task.setvariable variable=imageNamePipeline;isOutput=true]$ImageName"
          echo "##vso[task.setvariable variable=imageBuilderPipeline;isOutput=true]$ImageBuilder"
        name: DetermineImageInfo
  - job: azure
    dependsOn: Foo
    condition: eq(dependencies.Foo.outputs['DetermineResult.doThing'], 'azure')
    steps:
      - script: echo "Job azure ran and doThing is azure."
  - job: AWS_Set_Image_Info
    dependsOn: Foo
    condition: eq(dependencies.Foo.outputs['DetermineImageInfo.ImageBuilder'], 'amazon-ebs')
    steps:
      - script: echo "Job aws ran and doThing is aws."
  - job: Azure_Set_Image_Info
    dependsOn: Foo
    condition: eq(dependencies.Foo.outputs['DetermineImageInfo.ImageBuilder'], 'azure-arm')
    steps:
      - script: echo "Job azure ran and doThing is azure."

- stage: Build_SecureImage2
  displayName: 'Build2'
  jobs:
  - job: test
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: echo $MYSECRET
      env:
        MySecret: $(Foo)
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: echo $MYSECRET2
      env:
        MySecret: $(Foo)
# echo '##vso[task.setVariable variable=myVar]myValue'