# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger: none
#trigger:
#  branches:
#    include:
#    - '*'  # must quote since "*" is a YAML reserved character; we want a string

extends:
  template: start.yaml

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: Testing
    displayName: Testing
    jobs:
    - ${{ if contains(parameters.configs, 'x86') }}:
      - job: show_variables1
        steps:
        - task: Bash@3
          displayName: Show Variables1
          inputs:
            targetType: 'inline'
            script: |
                echo "${{ parameters.imagesMenu }}"
                echo "${{ parameters.osMenu }}"
                echo "${{ parameters.imageVarFile }}"
                echo "${{ parameters.providerMenu }}"
                echo "$(imagename)"
                echo "${{ parameters.providerMenu }}"
    - ${{ if contains(parameters.configs, 'x86') }}:
      - job: show_variables2
        steps:
        - task: Bash@3
          displayName: Show Variables2
          inputs:
            targetType: 'inline'
            script: |
                echo "${{ parameters.imagesMenu }}"
                echo "${{ parameters.osMenu }}"
                echo "${{ parameters.imageVarFile }}"
                echo "${{ parameters.providerMenu }}"
                echo "$(imagename)"
    - ${{ if contains(parameters.configs, 'x86') }}:
      - job: show_variables3
        steps:
        - task: Bash@3
          displayName: Show Variables3
          inputs:
            targetType: 'inline'
            script: |
                echo "${{ parameters.imagesMenu }}"
                echo "${{ parameters.osMenu }}"
                echo "${{ parameters.imageVarFile }}"
                echo "${{ parameters.providerMenu }}"
                echo "$(imagename)"

  - stage: Testing1
    displayName: Testing1
    jobs:
    - ${{ if eq(parameters.imagesMenu, 'all') }}:
      - job: show_variables1
        steps:
        - task: Bash@3
          displayName: Show Variables1
          inputs:
            targetType: 'inline'
            script: |
                echo "${{ parameters.imagesMenu }}"
  - stage: Testing2
    displayName: Testing2
    jobs:
    - ${{ if eq(parameters.imagesMenu, 'all') }}:
      - job: show_variables2
        steps: 
        - ${{ each parameter in parameters }}:
          - script: echo ${{ parameter.Key }} 
          - script: echo ${{ parameter.Value }}

  - stage: Run_Packer
    displayName: 'Run_Packer'
    jobs:
    - job: Run_Packer
      steps:
      - task: Bash@3
        displayName: 'Install_Packer'
        inputs:
          targetType: 'inline'
          script: |
            # VER=1.5.1
            # echo "Download File"
            # wget https://releases.hashicorp.com/packer/${VER}/packer_${VER}_linux_amd64.zip
            # echo "Unzip File and move to local bin"
            # sudo unzip packer_${VER}_linux_amd64.zip -d /usr/local/bin
            # echo "Get version"
            packer --version
      - task: Bash@3
        displayName: 'Packer_Create_Image'
        inputs:
          targetType: 'inline'
          script: |
            export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
            export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESSkey)
            export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
            export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
            export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
            export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
            export ARM_TENANT_ID=$(ARM_TENANT_ID)
            export PACKER_LOG_PATH="packer.log"
            export PACKER_LOG=1

            az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
            chmod +x ado_packer_image.sh
            ./ado_packer_image.sh "${{ parameters.providerMenu }}" "${{ parameters.osMenu }}" "${{ parameters.imagesMenu }}" "${{ parameters.imageVarFile }}"

  - stage: terraform_stage3
    jobs:
      - job: terraform_stage3
        steps:

        # Just like in the first example, we can expand the variable within Azure Pipelines itself
        - task: Bash@3
          displayName: 'Terraform launch destroy'
          inputs:
            targetType: 'inline'
            script: |
              export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
              export AWS_SECRET_ACCESS_KEY=$(AWS_SECRET_ACCESSkey)
              export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
              export ARM_CLIENT_ID=$(ARM_CLIENT_ID)
              export ARM_CLIENT_SECRET=$(ARM_CLIENT_SECRET)
              export ARM_SUBSCRIPTION_ID=$(ARM_SUBSCRIPTION_ID)
              export ARM_TENANT_ID=$(ARM_TENANT_ID)
              echo "Starting Terraform build"
              echo "Provider: ${{ parameters.providerMenu }}"
              echo "OS: ${{ parameters.osMenu }}"
              echo "Image: ${{ parameters.imagesMenu }}"

              az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
              
              chmod +x ado_terraform.sh
              ./ado_terraform.sh "${{ parameters.providerMenu }}" "${{ parameters.osMenu }}" "${{ parameters.imagesMenu }}"