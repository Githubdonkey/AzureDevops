# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - '*'  # must quote since "*" is a YAML reserved character; we want a string

pool:
  vmImage: 'ubuntu-latest'

stages:

- stage: Build_Initialize
  displayName: 'Build_Initialize'
  jobs:
  - job: Install_software
    steps:
    - task: Bash@3
      displayName: 'Install PreReq packages'
      inputs:
        targetType: 'inline'
        script: |
            ls /usr/local/bin
            sudo apt-get update
            sudo apt-get install curl jq unzip -y
    - task: Bash@3
      displayName: 'Install_AWS_CLI'
      inputs:
        targetType: 'inline'
        script: |
            sudo apt-get install awscli -y
            #export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
            #export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
            #export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
            #aws --version
            #aws s3 ls
    - task: Bash@3
      displayName: 'Install_AZURE_AZ'
      inputs:
        targetType: 'inline'
        script: |
            #az login --service-principal --username $(ARM_CLIENT_ID) --password $(ARM_CLIENT_SECRET) --tenant $(ARM_TENANT_ID)
    - task: Bash@3
      displayName: 'Install_Packer'
      inputs:
        targetType: 'inline'
        script: |
          VER=1.5.1
          echo "Download File"
          wget https://releases.hashicorp.com/packer/${VER}/packer_${VER}_linux_amd64.zip
          echo "Unzip File"
          unzip packer_${VER}_linux_amd64.zip
          echo "move to local bin"
          sudo mv packer /usr/local/bin
          echo "Get version"
          packer --version
    - task: Bash@3
      displayName: 'Install_Terraform'
      inputs:
        targetType: 'inline'
        script: |
          VER="0.12.19"
          echo "Download File"
          wget https://releases.hashicorp.com/terraform/${VER}/terraform_${VER}_linux_amd64.zip
          echo "Unzip File"
          unzip terraform_${VER}_linux_amd64.zip
          echo "move to local bin"
          sudo mv terraform /usr/local/bin/
          echo "Get version"
          terraform -v

- stage: Packer_Build
  displayName: 'Packer_Build'
  jobs:
  - job: Packer_Build
    steps:
    - task: Bash@3
      displayName: 'Packer Create Image'
      inputs:
        targetType: 'inline'
        script: |
            export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
            export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
            export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)

            cp packer/aws_ubuntu18_base_marketplace.json dev/aws_ubuntu18_base_marketplace.json
            cp packer/bootstrap_win.txt dev/bootstrap_win.txt
            cd dev/
            packer build aws_ubuntu18_base_marketplace.json
            cd ..
    - task: Bash@3
      displayName: 'AWS_OR_AZURE'
      inputs:
        targetType: 'inline'
        script: |
          export ImageBuilder=$(cat dev/manifest.json | jq '.builds | to_entries[] | .value.name' | tr -d '"')
          echo "##vso[task.setvariable variable=imageBuilderPipeline;isOutput=true]$ImageBuilder"
          echo "$ImageBuilder" > $(Pipeline.Workspace)/variables/ImageBuilder
        name: DetermineProvider
  - job: Packer_var
    steps:
    - task: Bash@3
      displayName: 'AWS_VARS'
      dependsOn: AWS_OR_AZURE
      condition: eq(dependencies.AWS_OR_AZURE.outputs['DetermineProvider.imageBuilderPipeline'], 'amazon-ebs' 
      inputs:
        targetType: 'inline'
        script: |
          export ImageBuilder=$(cat dev/manifest.json | jq '.builds | to_entries[] | .value.name' | tr -d '"')
          export ImageName=$(cat dev/manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
          export ImagePath=$(cat dev/manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
          export imagePacker=$(cat dev/manifest.json | jq '.builds | to_entries[] | .value.custom_data.name' | tr -d '"')
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
          export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)

          echo "##vso[task.setvariable variable=imageBuilderPipeline;isOutput=true]$ImageBuilder"
          echo "##vso[task.setvariable variable=imageNamePipeline;isOutput=true]$ImageName"
          echo "##vso[task.setvariable variable=imagePathPipeline;isOutput=true]$ImagePath"
          echo "ImageBuilder: $ImageBuilder ImageName: $ImageName ImagePath: $ImagePath"

          aws s3 cp manifest.json s3://gitdonkey/devops/${imagePacker}.json
        name: DetermineInfo
    - task: Bash@3
      displayName: 'AZURE_VARS'
      dependsOn: AWS_OR_AZURE
      condition: eq(dependencies.AWS_OR_AZURE.outputs['DetermineProvider.imageBuilderPipeline'], 'azure-arm' 
      inputs:
        targetType: 'inline'
        script: |
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
          export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)

          export ImageBuilder=$(cat dev/manifest.json | jq '.builds | to_entries[] | .value.name' | tr -d '"')
          export ImageName=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d'/' -f9)
          export TF_VAR_packer_name=$(cat dev/manifest.json | jq '.builds | to_entries[] | .value.custom_data.name' | tr -d '"')
          export imagePacker=$(cat dev/manifest.json | jq '.builds | to_entries[] | .value.custom_data.name' | tr -d '"')
          
          echo "##vso[task.setvariable variable=imageBuilderPipeline;isOutput=true]$ImageBuilder"
          echo "##vso[task.setvariable variable=imageNamePipeline;isOutput=true]$ImageName"
          echo "##vso[task.setvariable variable=imagePathPipeline;isOutput=true]$ImagePath"
          echo "ImageBuilder: $ImageBuilder ImageName: $ImageName ImagePath: $ImagePath"
        
          aws s3 cp manifest.json s3://gitdonkey/devops/${imagePacker}.json
        name: DetermineInfo

- stage: Build_Packer
  displayName: 'Build'
  jobs:
  - job: Foo
    steps:
      - script: |
          echo "This is job Foo."
          echo "##vso[task.setvariable variable=doThing;isOutput=true]aws"
        name: DetermineResult
  - job: aws
    dependsOn: Foo
    condition: eq(dependencies.Foo.outputs['DetermineResult.doThing'], 'aws')
    steps:
      - script: |
          export AWS_ACCESS_KEY_ID=$(AWS_ACCESS_KEY_ID)
          export AWS_SECRET_ACCESS_KEY=$(aws_secret_access_key)
          export AWS_DEFAULT_REGION=$(AWS_DEFAULT_REGION)
          #aws s3 cp s3://gitdonkey/devops/SICFactory-Ubuntu1804-1579569816.json manifest.json
          export ImageBuilder=$(cat manifest.json | jq '.builds | to_entries[] | .value.name' | tr -d '"')
          export ImageName=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
          export ImagePath=$(cat manifest.json | jq '.builds | to_entries[] | .value.artifact_id' | tr -d '"' | cut -d':' -f2)
          
          echo "##vso[task.setvariable variable=imageBuilderPipeline;isOutput=true]$ImageBuilder"
          echo "##vso[task.setvariable variable=imageNamePipeline;isOutput=true]$ImageName"
          echo "##vso[task.setvariable variable=imagePathPipeline;isOutput=true]$ImagePath"
          echo "ImageBuilder: $ImageBuilder ImageName: $ImageName ImagePath: $ImagePath"
        name: DetermineImageInfo
  - job: AWS_Set_Image_Info
    dependsOn: aws
    condition: eq(dependencies.aws.outputs['DetermineImageInfo.imageBuilderPipeline'], 'amazon-ebs' )
    variables:
      # Define the variable FOO from the previous job
      # Note the use of single quotes!
      FOOO: $[ dependencies.aws.outputs['DetermineImageInfo.imageBuilderPipeline'] ]
    steps:
      - script: | 
          echo $(FOOO)
          echo $FOOO
        
  - job: Azure_Set_Image_Info
    dependsOn: aws
    condition: eq(dependencies.aws.outputs['DetermineImageInfo.imageBuilderPipeline'], 'azure-arm')
    steps:
      - script: echo "Job azure ran and doThing is azure."

- stage: Build_SecureImage2
  displayName: 'Build2'
  jobs:
  - job: test
    variables:
      # Define the variable FOO from the previous job
      # Note the use of single quotes!
      FOOO: $[ dependencies.aws.outputs['DetermineImageInfo.imageBuilderPipeline'] ]
    steps:
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: | 
          echo $FOOO
          echo $(FOOO)
    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: echo $MYSECRET2
      env:
        MySecret: $(Foo)
# echo '##vso[task.setVariable variable=myVar]myValue'

stages:

  - stage: firststage
    jobs:

      - job: firstjob
        pool:
          vmImage: 'Ubuntu-16.04'
        steps:

          # To pass the variable FOO, write it to a file
          # While the file name doesn't matter, naming it like the variable and putting it inside the $(Pipeline.Workspace)/variables folder could be a good pattern
          - bash: |
              FOO="some value"
              mkdir -p $(Pipeline.Workspace)/variables
              echo "$FOO" > $(Pipeline.Workspace)/variables/FOO

          # Publish the folder as pipeline artifact
          - publish: $(Pipeline.Workspace)/variables
            artifact: variables
  
  - stage: secondstage
    jobs:

      - job: secondjob
        pool:
          vmImage: 'Ubuntu-16.04'
        steps:

          # Download the artifacts
          - download: current
            artifact: variables

          # Read the variable from the file, then expose it in the job
          - bash: |
              FOO=$(cat $(Pipeline.Workspace)/variables/FOO)
              echo "##vso[task.setvariable variable=FOO]$FOO"

          # Just like in the first example, we can expand the variable within Azure Pipelines itself
          - bash: |
              echo "$(FOO)"

          # Or we can expand it within bash, reading it as environmental variable
          - bash: |
              echo "$FOO"